#include <AFMotor.h>  
#include <NewPing.h>
#include <Servo.h> 

#define TRIG_PIN A0 
#define ECHO_PIN A1 
#define MAX_DISTANCE 200 
#define MAX_SPEED 190 // sets speed of DC motors
#define MAX_SPEED_OFFSET 20

NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE); 

AF_DCMotor motor1(1, MOTOR12_1KHZ); 
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR34_1KHZ);
AF_DCMotor motor4(4, MOTOR34_1KHZ);
Servo myservo;   

boolean goesForward = false;
int distance = 100;
int speedSet = 0;

void setup() {
  myservo.attach(10);  
  myservo.write(115); 
  delay(2000);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
}

void loop() {
  int distanceR = 0;
  int distanceL = 0;
  delay(40);
 
  if (distance <= 15) {
    moveStop();
    delay(100);
    moveBackward();
    delay(300);
    moveStop();
    delay(200);
    distanceR = lookRight();
    delay(200);
    distanceL = lookLeft();
    delay(200);

    if (distanceR >= distanceL) {
      turnRight();
      moveStop();
    } else {
      turnLeft();
      moveStop();
    }
  } else {
    moveForward();
  }
  distance = readPing();
}

int lookRight() {
  myservo.write(50); 
  delay(500);
  int distance = readPing();
  delay(100);
  myservo.write(115); 
  return distance;
}

int lookLeft() {
  myservo.write(170); 
  delay(500);
  int distance = readPing();
  delay(100);
  myservo.write(115); 
  return distance;
}

int readPing() { 
  delay(70);
  int cm = sonar.ping_cm();
  if (cm == 0) {
    cm = 250;
  }
  return cm;
}

void moveStop() {
  motor1.run(RELEASE); 
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
} 
  
void moveForward() {
  if (!goesForward) {
    goesForward = true;
    motor1.run(FORWARD);      
    motor2.run(FORWARD);
    motor3.run(FORWARD); 
    motor4.run(FORWARD);     
    for (speedSet = 0; speedSet < MAX_SPEED; speedSet += 2) {
      motor1.setSpeed(speedSet);
      motor2.setSpeed(speedSet);
      motor3.setSpeed(speedSet);
      motor4.setSpeed(speedSet);
      delay(5);
    }
  }
}

void moveBackward() {
  goesForward = false;
  motor1.run(BACKWARD);      
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);  
  for (speedSet = 0; speedSet < MAX_SPEED; speedSet += 2) {
    motor1.setSpeed(speedSet);
    motor2.setSpeed(speedSet);
    motor3.setSpeed(speedSet);
    motor4.setSpeed(speedSet);
    delay(5);
  }
}  

void turnRight() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);     
  delay(500);
  motor1.run(FORWARD);      
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);      
} 
 
void turnLeft() {
  motor1.run(BACKWARD);     
  motor2.run(BACKWARD);  
  motor3.run(FORWARD);
  motor4.run(FORWARD);   
  delay(500);
  motor1.run(FORWARD);     
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
}
This version maintains the same functionality but is structured for better readability. If you need any further adjustments or explanations, feel free to ask

1github.com
2github.com
rewrite the code in a more advanced way
Sure, let's enhance the code with some advanced features and improvements. We'll add functions for better modularity, use constants for configuration, and improve the readability and efficiency of the code.

cpp
#include <AFMotor.h>  
#include <NewPing.h>
#include <Servo.h> 

// Constants for configuration
const int TRIG_PIN = A0;
const int ECHO_PIN = A1;
const int MAX_DISTANCE = 200;
const int MAX_SPEED = 190;
const int TURN_DELAY = 500;
const int SCAN_DELAY = 500;
const int STOP_DELAY = 100;
const int BACKWARD_DELAY = 300;
const int SERVO_CENTER = 115;
const int SERVO_RIGHT = 50;
const int SERVO_LEFT = 170;
const int OBSTACLE_THRESHOLD = 15;

NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE); 

AF_DCMotor motor1(1, MOTOR12_1KHZ); 
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR34_1KHZ);
AF_DCMotor motor4(4, MOTOR34_1KHZ);
Servo myservo;   

boolean goesForward = false;
int distance = 100;
int speedSet = 0;

void setup() {
  myservo.attach(10);  
  centerServo();
  initializeDistance();
}

void loop() {
  int distanceR = 0;
  int distanceL = 0;
  delay(40);
 
  if (distance <= OBSTACLE_THRESHOLD) {
    handleObstacle();
  } else {
    moveForward();
  }
  distance = readPing();
}

void handleObstacle() {
  moveStop();
  delay(STOP_DELAY);
  moveBackward();
  delay(BACKWARD_DELAY);
  moveStop();
  delay(STOP_DELAY);
  int distanceR = lookRight();
  delay(SCAN_DELAY);
  int distanceL = lookLeft();
  delay(SCAN_DELAY);

  if (distanceR >= distanceL) {
    turnRight();
  } else {
    turnLeft();
  }
  moveStop();
}

void centerServo() {
  myservo.write(SERVO_CENTER); 
  delay(2000);
}

void initializeDistance() {
  for (int i = 0; i < 4; i++) {
    distance = readPing();
    delay(100);
  }
}

int lookRight() {
  myservo.write(SERVO_RIGHT); 
  delay(SCAN_DELAY);
  int distance = readPing();
  delay(100);
  centerServo();
  return distance;
}

int lookLeft() {
  myservo.write(SERVO_LEFT); 
  delay(SCAN_DELAY);
  int distance = readPing();
  delay(100);
  centerServo();
  return distance;
}

int readPing() { 
  delay(70);
  int cm = sonar.ping_cm();
  return (cm == 0) ? 250 : cm;
}

void moveStop() {
  motor1.run(RELEASE); 
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
} 
  
void moveForward() {
  if (!goesForward) {
    goesForward = true;
    setMotorDirection(FORWARD);
    graduallyIncreaseSpeed();
  }
}

void moveBackward() {
  goesForward = false;
  setMotorDirection(BACKWARD);
  graduallyIncreaseSpeed();
}  

void turnRight() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);     
  delay(TURN_DELAY);
  setMotorDirection(FORWARD);
} 
 
void turnLeft() {
  motor1.run(BACKWARD);     
  motor2.run(BACKWARD);  
  motor3.run(FORWARD);
  motor4.run(FORWARD);   
  delay(TURN_DELAY);
  setMotorDirection(FORWARD);
}

void setMotorDirection(uint8_t direction) {
  motor1.run(direction);
  motor2.run(direction);
  motor3.run(direction);
  motor4.run(direction);
}

void graduallyIncreaseSpeed() {
  for (speedSet = 0; speedSet < MAX_SPEED; speedSet += 2) {
    motor1.setSpeed(speedSet);
    motor2.setSpeed(speedSet);
    motor3.setSpeed(speedSet);
    motor4.setSpeed(speedSet);
    delay(5);
  }
}
